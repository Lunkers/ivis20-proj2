{"version":3,"sources":["logo.svg","gdp_data.csv","graphcontainer.js","graph_functions.js","App.js","serviceWorker.js","index.js","data.csv","world.geojson"],"names":["module","exports","GraphContainer","data","series","var1","var2","stateNum","d3Container","useRef","useEffect","current","fData","filter","d","wave","cultures","map","CulZon","colorScale","d3","domain","range","xScale","yScale","parent","xVar","yVar","tip","d3Tip","attr","offset","html","country","call","selectAll","join","enter","append","on","show","hide","transition","duration","style","remove","text","console","log","create_scatter","className","ref","width","height","App","useState","updateState","wvsData","setWvsData","then","read","stateData","content","onClick","Object","keys","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.42b5228d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/gdp_data.e82212c1.csv\";","import React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport { create_scatter, create_geo } from './graph_functions';\n\nexport function GraphContainer({ data, series, var1, var2, stateNum }) {\n    let d3Container = useRef(null);\n\n    useEffect(\n        () => {\n            if (data && d3Container.current) {\n                if (stateNum < 3) {\n                    var1 = \"PerHea\"\n                    var2 = \"Happy\"\n                } else if (stateNum < 6){\n                    var1 = \"WilFig\"\n                    var2 = \"StaTru\"\n                } else {\n                    var1=\"LifSat\";\n                    var2=\"FinSat\"\n                }\n\n                //filter data, and remove countries without any.\n                const fData = data.filter(d => d.wave === series && d[var1] !== \"\" && d[var2] !== \"\")\n                const cultures = data.map(d => d.CulZon)\n\n                //set up color scale\n                const colorScale = d3.scaleOrdinal()\n                colorScale.domain(cultures)\n                colorScale.range(d3.schemeCategory10)\n\n                //Create scales for values\n                const xScale = d3.scaleLinear().domain([\n                    d3.min(data, d => d[var1]), d3.max(data, d => d[var1])\n                ]).range([75, 625])\n                const yScale = d3.scaleLinear().domain([\n                    d3.max(data, d => d[var2]), d3.min(data, d => d[var2])\n                ]).range([25, 625])\n\n                const svg = d3.select(d3Container.current);\n                //draw graph\n\n                create_scatter(svg, fData, xScale, yScale, var1, var2, colorScale)\n            }\n        }, [data, d3Container.current, series, stateNum])\n\n    return (\n        <svg\n            className=\"d3-component\"\n            ref={d3Container}\n            width={\"80vw\"}\n            height={\"100vh\"}\n        />\n    )\n}","import * as d3 from 'd3'\nimport d3Tip from 'd3-tip'\nimport * as d3Geo from 'd3-geo';\nimport worldData from './world.geojson'\n\n\nexport const create_scatter = (parent, data, xScale, yScale, xVar, yVar,  colorScale) => {\n    // Setup tooltips\n    const tip = d3Tip()\n        .attr(\"class\", \"d3-tooltip\")\n        .offset([0, 0])\n        .html(d => d.country)\n    parent.call(tip)\n    const graph = parent\n        .selectAll('circle')\n        .data(data)\n        .join(\n            enter => enter.append('circle')\n                .on('mouseover', tip.show)\n                .on('mouseout', tip.hide)\n        )\n        .transition()\n        .duration(2000)\n        .attr('cx', d => xScale(d[xVar]))\n        .attr('cy', d => yScale(d[yVar]))\n        .style(\"display\", d=> (d[xVar] === null || d[yVar] === null) ? 'none': null)\n        .attr('r', 10)\n        .attr('id', d => d.country)\n        .attr('fill', d => colorScale(d.CulZon))\n\n    // TODO: add legend with filtering\n\n    // remove old axes\n    parent.selectAll(\".xaxis\").remove();\n    parent.selectAll(\".yaxis\").remove();\n    parent.selectAll(\".xlabel\").remove();\n    parent.selectAll(\".ylabel\").remove();\n    //append axes\n    parent.append(\"g\")\n        .attr(\"class\", \"xaxis\")\n        .attr(\"transform\", \"translate(0,\" + 625 + \")\")\n        .call(d3.axisBottom(xScale));\n\n    parent.append(\"g\")\n        .attr(\"class\", \"yaxis\")\n        .attr(\"transform\", \"translate(\" + 75 + \",0)\")\n        .call(d3.axisLeft(yScale));\n\n    parent.append(\"text\")\n    .style(\"fill\", \"white\")\n        .attr(\"class\", \"xlabel\")\n        .attr(\"text-anchor\", \"end\")\n        .attr(\"x\", 600)\n        .attr(\"y\", 675)\n        .text(() => {\n            switch(xVar) {\n                case \"LifSat\": {\n                    console.log(\"LIFSAT\")\n                    return \"Satisfaction with life\"\n                }\n                case \"WilFig\": {\n                    return \"Willingness to fight for your country\"\n                }\n                case \"PerHea\": {\n                    return \"Perceived Health\"\n                }\n            }\n        });\n\n        parent.append(\"text\")\n        .style(\"fill\", \"white\")\n            .attr(\"class\", \"ylabel\")\n            .attr(\"text-anchor\", \"start\")\n            .attr(\"transform\", \"rotate(270)\")\n            .attr(\"x\", -625)\n            .attr(\"y\", 45)\n            \n            .text(() => {\n                switch(yVar) {\n                    case \"Happy\": {\n                        console.log(\"LIFSAT\")\n                        return \"Happiness\"\n                    }\n                    case \"StaTru\": {\n                        return \"Trust in others\"\n                    }\n                    case \"FinSat\": {\n                        return \"Financial Satisfaction\"\n                    }\n                }\n            });\n\n    //setup legend\n    const legend = parent.selectAll(\".legend\");\n}\n\nexport const create_geo = (parent, data, colorScale) => {\n    parent.selectAll(\"svg > *\").remove();\n    console.log(\"running geo\")\n    const projection = d3.geoMercator();\n\n    const geoGenerator = d3Geo.geoPath(projection)\n    console.log(geoGenerator(\"Sweden\"))\n    //console.log(parent)\n    const  graph = parent.selectAll(\"path\").data(data)\n    .join(\"path\").attr(\"fill\", \"green\").attr(\"d\", geoGenerator(worldData) )\n    console.log(graph)\n}","import React, { useState, useEffect, useRef } from 'react';\nimport logo from './logo.svg';\nimport * as d3 from 'd3';\nimport data from './data.csv';\nimport gdpData from './gdp_data.csv'\nimport './App.css';\nimport { GraphContainer } from './graphcontainer'\nimport stateData from './states.json'\nimport { color } from 'd3';\n\nfunction App() {\n  const [stateNum, updateState] = useState(0);\n  const [wvsData, setWvsData] = useState(null)\n\n  //load wvs data\n  useEffect(() => {\n    console.log(\"recalculating colors\")\n    d3.csv(data).then(read => {\n      setWvsData(read)\n    })\n  }, [])\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n        <div className=\"content-container\">\n          <h3> {stateData[stateNum].text}</h3>\n          <p className=\"content\">{stateData[stateNum].content}</p>\n          {stateNum > 0 && (<button onClick={() => updateState(stateNum - 1)}> Previous </button>)}\n          {(stateNum !== Object.keys(stateData).length -1) && (<button onClick={() => updateState(stateNum + 1)}> Next </button>)}\n        </div>\n        {wvsData ? (<GraphContainer data={wvsData} series={stateData[stateNum].series} stateNum={stateNum}  />) : (<p>Loading...</p>)}\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/data.4ec5f055.csv\";","module.exports = __webpack_public_path__ + \"static/media/world.025403f0.geojson\";"],"sourceRoot":""}