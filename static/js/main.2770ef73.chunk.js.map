{"version":3,"sources":["graphcontainer.js","graph_functions.js","App.js","serviceWorker.js","index.js","data.csv","logo.svg","gdp_data.csv","world.geojson"],"names":["GraphContainer","data","series","var1","var2","stateNum","d3Container","useRef","useEffect","current","fData","filter","d","wave","cultures","map","CulZon","colorScale","d3","domain","range","xScale","yScale","parent","xVar","yVar","clicked","tip","d3Tip","attr","offset","html","country","call","selectAll","join","enter","append","on","show","hide","transition","duration","style","remove","text","console","log","legend","i","e","create_scatter","className","ref","width","height","App","useState","updateState","wvsData","setWvsData","then","read","document","title","stateData","content","onClick","Object","keys","length","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.2770ef73.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport { create_scatter, create_geo } from './graph_functions';\n\nexport function GraphContainer({ data, series, var1, var2, stateNum }) {\n    let d3Container = useRef(null);\n\n    useEffect(\n        () => {\n            if (data && d3Container.current) {\n                if (stateNum < 3) {\n                    var1 = \"PerHea\"\n                    var2 = \"Happy\"\n                } else if (stateNum < 6){\n                    var1 = \"WilFig\"\n                    var2 = \"StaTru\"\n                } else if (stateNum < 9) {\n                    var1=\"LifSat\";\n                    var2=\"FinSat\"\n                } else {\n                    var1 = \"SVI_short\"\n                    var2 = \"IndEmp2\"\n                }\n\n                //filter data, and remove countries without any.\n                const fData = data.filter(d => d.wave === series && d[var1] !== \"\" && d[var2] !== \"\")\n                const cultures = data.map(d => d.CulZon)\n\n                //set up color scale\n                const colorScale = d3.scaleOrdinal()\n                colorScale.domain(cultures)\n                colorScale.range(d3.schemeCategory10)\n\n                //Create scales for values\n                const xScale = d3.scaleLinear().domain([\n                    d3.min(data, d => d[var1]), d3.max(data, d => d[var1])\n                ]).range([75, 625])\n                const yScale = d3.scaleLinear().domain([\n                    d3.max(data, d => d[var2]), d3.min(data, d => d[var2])\n                ]).range([25, 625])\n\n                const svg = d3.select(d3Container.current);\n                //draw graph\n\n                create_scatter(svg, fData, xScale, yScale, var1, var2, colorScale, series)\n            }\n        }, [data, d3Container.current, series, stateNum])\n\n    return (\n        <svg\n            className=\"d3-component\"\n            ref={d3Container}\n            width={\"80vw\"}\n            height={\"100vh\"}\n        />\n    )\n}","import * as d3 from 'd3'\nimport d3Tip from 'd3-tip'\nimport * as d3Geo from 'd3-geo';\nimport worldData from './world.geojson'\nimport { series } from 'async';\n\n\nexport const create_scatter = (parent, data, xScale, yScale, xVar, yVar,  colorScale, series) => {\n    let clicked = \"\"\n    // Setup tooltips\n    const tip = d3Tip()\n        .attr(\"class\", \"d3-tooltip\")\n        .offset([0, 0])\n        .html(d => d.country)\n    parent.call(tip)\n    const graph = parent\n        .selectAll('circle')\n        .data(data)\n        .join(\n            enter => enter.append('circle')\n                .attr(\"stroke\", \"black\")\n                .attr(\"class\", \"plot-point\")\n                .on('mouseover', tip.show)\n                .on('mouseout', tip.hide)\n        )\n        .transition()\n        .duration(2000)\n        .attr('cx', d => xScale(d[xVar]))\n        .attr('cy', d => yScale(d[yVar]))\n        .style(\"display\", d=> (d[xVar] === null || d[yVar] === null) ? 'none': null)\n        .attr('r', 10)\n        .attr('id', d => d.country)\n        .attr('fill', d => colorScale(d.CulZon))\n        .style('opacity', 1);\n\n    // TODO: add legend with filtering\n\n    // remove old axes\n    parent.selectAll(\".xaxis\").remove();\n    parent.selectAll(\".yaxis\").remove();\n    parent.selectAll(\".xlabel\").remove();\n    parent.selectAll(\".ylabel\").remove();\n    //append axes\n    parent.append(\"g\")\n        .attr(\"class\", \"xaxis\")\n        .attr(\"transform\", \"translate(0,\" + 625 + \")\")\n        .call(d3.axisBottom(xScale));\n\n    parent.append(\"g\")\n        .attr(\"class\", \"yaxis\")\n        .attr(\"transform\", \"translate(\" + 75 + \",0)\")\n        .call(d3.axisLeft(yScale));\n\n    parent.append(\"text\")\n    .style(\"fill\", \"white\")\n        .attr(\"class\", \"xlabel\")\n        .attr(\"text-anchor\", \"end\")\n        .attr(\"x\", 600)\n        .attr(\"y\", 675)\n        .text(() => {\n            switch(xVar) {\n                case \"LifSat\": {\n                    console.log(\"LIFSAT\")\n                    return \"Satisfaction with life\"\n                }\n                case \"WilFig\": {\n                    return \"Willingness to fight for your country\"\n                }\n                case \"PerHea\": {\n                    return \"Perceived Health\"\n                }\n                case \"SVI_short\": {\n                    return \"Secular value index\"\n                }\n            }\n        });\n\n        parent.append(\"text\")\n        .style(\"fill\", \"white\")\n            .attr(\"class\", \"ylabel\")\n            .attr(\"text-anchor\", \"start\")\n            .attr(\"transform\", \"rotate(270)\")\n            .attr(\"x\", -625)\n            .attr(\"y\", 45)\n            \n            .text(() => {\n                switch(yVar) {\n                    case \"Happy\": {\n                        console.log(\"LIFSAT\")\n                        return \"Happiness\"\n                    }\n                    case \"StaTru\": {\n                        return \"Trust in others\"\n                    }\n                    case \"FinSat\": {\n                        return \"Financial Satisfaction\"\n                    }\n                    case \"IndEmp2\": {\n                        return \"Individual Empowerment\"\n                    }\n                }\n            });\n\n    //remove old legend\n    parent.selectAll(\".legend\").remove();\n\n    //setup legend\n    const legend = parent.selectAll(\".legend\")\n    .data(colorScale.domain())\n    .join(\n        enter => enter.append(\"g\")\n        .attr(\"class\", \"legend\")\n        .attr(\"transform\", (d, i) => \"translate(700,\" + (100 +(i * 25 )) + \")\"),\n        \n    )\n\n    legend.append(\"circle\")\n    .attr(\"r\", 10)\n    .style(\"stroke\", \"black\")\n    .style(\"fill\", d => colorScale(d))\n    .on('click', d => {\n        d3.selectAll('.plot-point').style('opacity', 1)\n\n        if(clicked !== d) {\n            d3.selectAll('.plot-point').filter(e => e.CulZon !== d).style('opacity', 0.1)\n            clicked = d \n        }\n        else {\n            clicked = d\n        }\n    })\n    \n    legend.append(\"text\")\n      .attr(\"x\", 20)\n      .attr(\"y\", 0)\n      .attr(\"dy\", \".35em\")\n      .style(\"fill\", \"white\")\n      .style(\"text-anchor\", \"start\")\n      .text(d=> d );\n\n    //remove old time series text\n    parent.selectAll('.series').remove()\n\n    //append time series text\n    const seriesText = parent.append(\"text\")\n    .attr('class', 'series')\n    .attr('x', 500)\n    .attr('y', 600)\n    .text(series)\n    .style('fill', 'white')\n    .style('opacity', 0.5)\n\n}","import React, { useState, useEffect, useRef } from 'react';\nimport logo from './logo.svg';\nimport * as d3 from 'd3';\nimport data from './data.csv';\nimport gdpData from './gdp_data.csv'\nimport './App.css';\nimport { GraphContainer } from './graphcontainer'\nimport stateData from './states.json'\nimport { color } from 'd3';\n\nfunction App() {\n  const [stateNum, updateState] = useState(0);\n  const [wvsData, setWvsData] = useState(null)\n\n  //load wvs data\n  useEffect(() => {\n    d3.csv(data).then(read => {\n      setWvsData(read)\n    })\n  }, [])\n\n  //load GDP data\n  /*useEffect(() => {\n    if(wvsData) {\n      d3.csv(gdpData).then(read => {\n        console.log(read)\n        wvsData.map(d => d.gdp = read[d.country][d.year])\n      }).then(console.lod(wvsData))\n    }\n  }, [wvsData])*/\n  document.title = \"WVS Data visualization\"\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n        <div className=\"content-container\">\n          <h3> {stateData[stateNum].text}</h3>\n          <p className=\"content\">{stateData[stateNum].content}</p>\n          {stateNum > 0 && (<button onClick={() => updateState(stateNum - 1)}> Previous </button>)}\n          {(stateNum !== Object.keys(stateData).length -1) && (<button onClick={() => updateState(stateNum + 1)}> Next </button>)}\n        </div>\n        {wvsData ? (<GraphContainer data={wvsData} series={stateData[stateNum].series} stateNum={stateNum}  />) : (<p>Loading...</p>)}\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/data.4ec5f055.csv\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/gdp_data.e82212c1.csv\";","module.exports = __webpack_public_path__ + \"static/media/world.025403f0.geojson\";"],"sourceRoot":""}